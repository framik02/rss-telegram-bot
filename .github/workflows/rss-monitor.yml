name: RSS Feed Monitor

on:
  schedule:
    # Esegue ogni 10 minuti - puoi cambiare:
    # */5 * * * *    = ogni 5 minuti
    # */15 * * * *   = ogni 15 minuti  
    # 0 * * * *      = ogni ora
    # 0 */6 * * *    = ogni 6 ore
    - cron: '*/5 * * * *'
  
  # Permette avvio manuale dalla tab Actions
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (invia solo un messaggio di test)'
        required: false
        default: 'false'
        type: boolean
  
  # Esegue quando modifichi il workflow
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/monitor.yml'
      - 'github_monitor.py'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download previous state
      continue-on-error: true
      run: |
        # Scarica lo stato precedente se esiste
        if curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -H "Accept: application/vnd.github.v3.raw" \
           -o visti.json \
           "https://api.github.com/repos/${{ github.repository }}/contents/visti.json" 2>/dev/null; then
          echo "‚úÖ Stato precedente scaricato"
        else
          echo "üìÅ Primo avvio, nessuno stato precedente"
          echo '{"link_visti": []}' > visti.json
        fi
        
    - name: Run RSS Monitor
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python github_monitor.py
        
    - name: Save state back to repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configura git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Aggiungi e committa solo se ci sono modifiche
        if [ -f visti.json ] && [ -s visti.json ]; then
          git add visti.json
          if ! git diff --staged --quiet; then
            git commit -m "ü§ñ Update monitored feeds state [skip ci]"
            git push
            echo "‚úÖ Stato salvato nel repository"
          else
            echo "üìù Nessuna modifica da salvare"
          fi
        fi
